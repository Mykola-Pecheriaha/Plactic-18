'use client';

import { useState, useEffect, useCallback, useRef } from 'react';
import { useRouter } from 'next/navigation';
import { Consultation, consultationManager } from '@/lib/client/consultationManager';
import styles from './Admin.module.css';

interface ConfirmationDialogProps {
  isOpen: boolean;
  title: string;
  message: string;
  onConfirm: () => void;
  onCancel: () => void;
}

function ConfirmationDialog({ isOpen, title, message, onConfirm, onCancel }: ConfirmationDialogProps) {
  if (!isOpen) return null;

  return (
    <div className={styles.confirmationOverlay}>
      <div className={styles.confirmationDialog}>
        <h3>{title}</h3>
        <p>{message}</p>
        <div className={styles.confirmationButtons}>
          <button className={styles.cancelButton} onClick={onCancel}>
            –°–∫–∞—Å—É–≤–∞—Ç–∏
          </button>
          <button className={styles.confirmButton} onClick={onConfirm}>
            –í–∏–¥–∞–ª–∏—Ç–∏
          </button>
        </div>
      </div>
    </div>
  );
}

export default function AdminPage() {
  const router = useRouter();
  const [consultations, setConsultations] = useState<Consultation[]>([]);
  const [selectedConsultation, setSelectedConsultation] = useState<Consultation | null>(null);
  const [response, setResponse] = useState('');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const lastScrollPosition = useRef(0);
  const consultationsRef = useRef<Consultation[]>([]);
  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false);

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ–π
  const fetchConsultations = useCallback(async () => {
    try {
      setError('');
      
      // –°–ø–æ—á–∞—Ç–∫—É –æ—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ API
      const apiResponse = await fetch('/api/admin/consultations');
      if (!apiResponse.ok) {
        const errorData = await apiResponse.json();
        throw new Error(errorData.error || '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ–π –∑ —Å–µ—Ä–≤–µ—Ä–∞');
      }
      const apiData = await apiResponse.json();
      
      // –ü–æ—Ç—ñ–º –æ—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
      const localData = consultationManager.getConsultations();
      
      // –û–±'—î–¥–Ω—É—î–º–æ –¥–∞–Ω—ñ, –Ω–∞–¥–∞—é—á–∏ –ø–µ—Ä–µ–≤–∞–≥—É —Å–µ—Ä–≤–µ—Ä–Ω–∏–º –¥–∞–Ω–∏–º
      const mergedData = [...localData];
      apiData.forEach((serverConsultation: Consultation) => {
        const index = mergedData.findIndex(c => c.id === serverConsultation.id);
        if (index !== -1) {
          mergedData[index] = serverConsultation;
        } else {
          mergedData.push(serverConsultation);
        }
      });

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –¥–∞–Ω—ñ –¥—ñ–π—Å–Ω–æ –∑–º—ñ–Ω–∏–ª–∏—Å—è
      const hasChanges = JSON.stringify(mergedData) !== JSON.stringify(consultationsRef.current);
      
      if (hasChanges) {
        consultationsRef.current = mergedData;
        setConsultations(mergedData);
      }
      
      setLoading(false);
    } catch (err) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ–π:', err);
      setError(err instanceof Error ? err.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞');
      setLoading(false);
    }
  }, []);

  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—é —Å–∫—Ä–æ–ª—É –ø–µ—Ä–µ–¥ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º
  const saveScrollPosition = useCallback(() => {
    const container = document.querySelector(`.${styles.consultationsList}`);
    if (container) {
      lastScrollPosition.current = container.scrollTop;
    }
  }, []);

  // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –ø–æ–∑–∏—Ü—ñ—é —Å–∫—Ä–æ–ª—É –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
  const restoreScrollPosition = useCallback(() => {
    const container = document.querySelector(`.${styles.consultationsList}`);
    if (container) {
      container.scrollTop = lastScrollPosition.current;
    }
  }, []);

  // –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∑–º—ñ–Ω–∏ —Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –º—ñ–∂ –≤–∫–ª–∞–¥–∫–∞–º–∏
  useEffect(() => {
    let isSubscribed = true;
    
    const handleUpdate = () => {
      if (isSubscribed) {
        saveScrollPosition();
        fetchConsultations().then(() => {
          if (isSubscribed) {
            restoreScrollPosition();
          }
        });
      }
    };

    // –ü–æ—á–∞—Ç–∫–æ–≤–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    handleUpdate();
    
    // –ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—è –Ω–∞ –∑–º—ñ–Ω–∏ –≤ –ø–æ—Ç–æ—á–Ω—ñ–π –≤–∫–ª–∞–¥—Ü—ñ
    const unsubscribe = consultationManager.subscribe(handleUpdate);
    
    // –ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—è –Ω–∞ –∑–º—ñ–Ω–∏ –∑ —ñ–Ω—à–∏—Ö –≤–∫–ª–∞–¥–æ–∫
    const handleStorageChange = (e: StorageEvent) => {
      if (e.key === 'consultations') {
        handleUpdate();
      }
    };

    window.addEventListener('storage', handleStorageChange);
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø—ñ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∏
    const interval = setInterval(handleUpdate, 30000);
    
    return () => {
      isSubscribed = false;
      unsubscribe();
      window.removeEventListener('storage', handleStorageChange);
      clearInterval(interval);
    };
  }, [fetchConsultations, saveScrollPosition, restoreScrollPosition]);

  const handleResponseSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!selectedConsultation || !response.trim()) return;

    try {
      saveScrollPosition();
      
      const apiResponse = await fetch('/api/admin/respond', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          consultationId: selectedConsultation.id,
          response: response.trim()
        }),
      });

      if (!apiResponse.ok) {
        const errorData = await apiResponse.json();
        throw new Error(errorData.error || '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ');
      }

      setResponse('');
      await fetchConsultations();
      restoreScrollPosition();
    } catch (err) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', err);
      setError(err instanceof Error ? err.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞');
    }
  };

  const handleStatusChange = useCallback(async (newStatus: 'inProgress' | 'completed') => {
    if (!selectedConsultation) return;

    try {
      saveScrollPosition();
      const updatedConsultation = {
        ...selectedConsultation,
        status: newStatus
      };
      
      const success = consultationManager.updateConsultation(updatedConsultation);
      if (success) {
        setSelectedConsultation(updatedConsultation);
        await fetchConsultations();
        restoreScrollPosition();
      } else {
        setError('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó');
      }
    } catch (err) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Å—Ç–∞—Ç—É—Å—É:', err);
      setError(err instanceof Error ? err.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞');
    }
  }, [selectedConsultation, fetchConsultations, saveScrollPosition, restoreScrollPosition]);

  const handleDelete = useCallback(async () => {
    if (!selectedConsultation) return;

    try {
      saveScrollPosition();
      const success = consultationManager.deleteConsultation(selectedConsultation.id);
      
      if (success) {
        setSelectedConsultation(null);
        await fetchConsultations();
        restoreScrollPosition();
      } else {
        setError('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é');
      }
    } catch (err) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó:', err);
      setError(err instanceof Error ? err.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞');
    } finally {
      setShowDeleteConfirmation(false);
    }
  }, [selectedConsultation, fetchConsultations, saveScrollPosition, restoreScrollPosition]);

  const getStatusLabel = (status: string) => {
    switch (status) {
      case 'new': return '–ù–æ–≤–∏–π';
      case 'inProgress': return '–í –æ–±—Ä–æ–±—Ü—ñ';
      case 'completed': return '–ó–∞–≤–µ—Ä—à–µ–Ω–æ';
      default: return status;
    }
  };

  if (loading) {
    return (
      <div className={styles.adminContainer}>
        <div className={styles.loading}>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</div>
      </div>
    );
  }

  return (
    <div className={styles.adminContainer}>
      <div className={styles.header}>
        <h1>–ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞</h1>
        <button 
          onClick={() => router.push('/')}
          className={styles.exitButton}
          aria-label="–í–∏–π—Ç–∏ –∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ"
        >
          –í–∏–π—Ç–∏
        </button>
      </div>
      
      {error && <div className={styles.error}>{error}</div>}
      
      <div className={styles.consultationsGrid}>
        <div className={styles.consultationsList}>
          <div className={styles.listHeader}>
            <h2>–ó–∞–ø–∏—Ç–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é</h2>
            <button 
              onClick={() => {
                saveScrollPosition();
                fetchConsultations().then(restoreScrollPosition);
              }}
              className={styles.refreshButton}
              aria-label="–û–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫"
            >
              üîÑ
            </button>
          </div>
          
          {consultations.length === 0 ? (
            <div className={styles.noConsultations}>
              –ù–µ–º–∞—î –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é
            </div>
          ) : (
            consultations.map((consultation: Consultation) => (
              <div
                key={consultation.id}
                className={`${styles.consultationCard} ${selectedConsultation?.id === consultation.id ? styles.selected : ''}`}
                onClick={() => setSelectedConsultation(consultation)}
              >
                <div className={styles.consultationHeader}>
                  <h3>{consultation.name}</h3>
                  <span className={`${styles.status} ${styles[consultation.status]}`}>
                    {getStatusLabel(consultation.status)}
                  </span>
                </div>
                <p className={styles.date}>
                  {new Date(consultation.createdAt).toLocaleString('uk-UA')}
                </p>
                <p className={styles.phone}>{consultation.phone}</p>
                {consultation.email && (
                  <p className={styles.email}>{consultation.email}</p>
                )}
              </div>
            ))
          )}
        </div>

        <div className={styles.consultationDetails}>
          {selectedConsultation ? (
            <>
              <div className={styles.detailsHeader}>
                <h2>–î–µ—Ç–∞–ª—ñ –∑–∞–ø–∏—Ç—É</h2>
                <span className={`${styles.status} ${styles[selectedConsultation.status]}`}>
                  {getStatusLabel(selectedConsultation.status)}
                </span>
              </div>

              <div className={styles.detailsContent}>
                <div className={styles.detailsSection}>
                  <h3>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</h3>
                  <p><strong>–Ü–º&apos;—è:</strong> {selectedConsultation.name}</p>
                  <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {selectedConsultation.phone}</p>
                  {selectedConsultation.email && (
                    <p><strong>Email:</strong> {selectedConsultation.email}</p>
                  )}
                  <p><strong>–î–∞—Ç–∞ –∑–∞–ø–∏—Ç—É:</strong> {new Date(selectedConsultation.createdAt).toLocaleString('uk-UA')}</p>
                </div>

                <div className={styles.detailsSection}>
                  <h3>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è</h3>
                  <p>{selectedConsultation.message}</p>
                </div>

                {selectedConsultation.response && (
                  <div className={styles.detailsSection}>
                    <h3>–í—ñ–¥–ø–æ–≤—ñ–¥—å</h3>
                    <p>{selectedConsultation.response}</p>
                  </div>
                )}

                <div className={styles.actions}>
                  {selectedConsultation.status === 'new' && (
                    <button
                      onClick={() => handleStatusChange('inProgress')}
                      className={styles.statusButton}
                    >
                      –í–∑—è—Ç–∏ –≤ –æ–±—Ä–æ–±–∫—É
                    </button>
                  )}

                  {selectedConsultation.status !== 'completed' && (
                    <form onSubmit={handleResponseSubmit} className={styles.responseForm}>
                      <textarea
                        value={response}
                        onChange={(e) => setResponse(e.target.value)}
                        placeholder="–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å..."
                        required
                      />
                      <button type="submit">–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å</button>
                    </form>
                  )}

                  <button
                    onClick={() => setShowDeleteConfirmation(true)}
                    className={styles.deleteButton}
                  >
                    –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é
                  </button>
                </div>
              </div>
            </>
          ) : (
            <div className={styles.noSelection}>
              <p>–í–∏–±–µ—Ä—ñ—Ç—å –∑–∞–ø–∏—Ç –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–µ—Ç–∞–ª–µ–π</p>
            </div>
          )}
        </div>
      </div>

      <ConfirmationDialog
        isOpen={showDeleteConfirmation}
        title="–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è"
        message="–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é? –¶—é –¥—ñ—é –Ω–µ–º–æ–∂–ª–∏–≤–æ —Å–∫–∞—Å—É–≤–∞—Ç–∏."
        onConfirm={handleDelete}
        onCancel={() => setShowDeleteConfirmation(false)}
      />
    </div>
  );
} 